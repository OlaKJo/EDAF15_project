


call graph profile:
          The sum of self and descendents is the major sort
          for this listing.

          function entries:

index     the index of the function in the call graph
          listing, as an aid to locating it (see below).

%time     the percentage of the total time of the program
          accounted for by this function and its
          descendents.

self      the number of seconds spent in this function
          itself.

descendents
          the number of seconds spent in the descendents of
          this function on behalf of this function.

called    the number of times this function is called (other
          than recursive calls).

self      the number of times this function calls itself
          recursively.

name      the name of the function, with an indication of
          its membership in a cycle, if any.

index     the index of the function in the call graph
          listing, as an aid to locating it.



          parent listings:

self*     the number of seconds of this function's self time
          which is due to calls from this parent.

descendents*
          the number of seconds of this function's
          descendent time which is due to calls from this
          parent.

called**  the number of times this function is called by
          this parent.  This is the numerator of the
          fraction which divides up the function's time to
          its parents.

total*    the number of times this function was called by
          all of its parents.  This is the denominator of
          the propagation fraction.

parents   the name of this parent, with an indication of the
          parent's membership in a cycle, if any.

index     the index of this parent in the call graph
          listing, as an aid in locating it.



          children listings:

self*     the number of seconds of this child's self time
          which is due to being called by this function.

descendent*
          the number of seconds of this child's descendent's
          time which is due to being called by this
          function.

called**  the number of times this child is called by this
          function.  This is the numerator of the
          propagation fraction for this child.

total*    the number of times this child is called by all
          functions.  This is the denominator of the
          propagation fraction.

children  the name of this child, and an indication of its
          membership in a cycle, if any.

index     the index of this child in the call graph listing,
          as an aid to locating it.



          * these fields are omitted for parents (or
          children) in the same cycle as the function.  If
          the function (or child) is a member of a cycle,
          the propagated times and propagation denominator
          represent the self time and descendent time of the
          cycle as a whole.

          ** static-only parents and children are indicated
          by a call count of 0.



          cycle listings:
          the cycle as a whole is listed with the same
          fields as a function entry.  Below it are listed
          the members of the cycle, and their contributions
          to the time and call counts of the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

granularity: each sample hit covers 2 byte(s) for 0.22% of 4.65 seconds

                                  called/total       parents 
index  %time    self descendants  called+self    name    	index
                                  called/total       children

                                                     <spontaneous>
[1]     89.2    0.51        3.63                 fm_rat [1]
                0.17        1.81 26998790/26998790     mulq [4]
                0.10        1.05 32877536/32877536     divq [5]
                0.11        0.21 5319517/5319517     group_sort [7]
                0.08        0.08 26998790/29762339     addq [14]
                0.01        0.02 2763549/2763549     compare [16]
                0.00        0.00       4/22456441     sign [17]
                0.00        0.00 2785838/5319517     all_pos [21]

-----------------------------------------------

                0.19        0.77 32877536/86875116     divq [5]
                0.31        1.27 53997580/86875116     mulq [4]
[2]     54.7    0.50        2.05 86875116         reduce [2]
                2.05        0.00 26924781/26924781     gcd [3]

-----------------------------------------------

                2.05        0.00 26924781/26924781     reduce [2]
[3]     44.0    2.05        0.00 26924781         gcd [3]

-----------------------------------------------

                0.17        1.81 26998790/26998790     fm_rat [1]
[4]     42.5    0.17        1.81 26998790         mulq [4]
                0.31        1.27 53997580/86875116     reduce [2]
                0.23        0.00 80996370/171192474     new_rational [6]

-----------------------------------------------

                0.10        1.05 32877536/32877536     fm_rat [1]
[5]     24.8    0.10        1.05 32877536         divq [5]
                0.19        0.77 32877536/86875116     reduce [2]
                0.09        0.00 32877536/171192474     new_rational [6]

-----------------------------------------------

                0.08        0.00 27556229/171192474     fm [10]
                0.08        0.00 29762339/171192474     addq [14]
                0.09        0.00 32877536/171192474     divq [5]
                0.23        0.00 80996370/171192474     mulq [4]
[6]     10.3    0.48        0.00 171192474         new_rational [6]

-----------------------------------------------

                0.11        0.21 5319517/5319517     fm_rat [1]
[7]      6.8    0.11        0.21 5319517         group_sort [7]
                0.19        0.00 9642736/9642736     swap_rows [9]
                0.02        0.00 19692888/22456441     sign [17]

-----------------------------------------------

                                                     <spontaneous>
[8]      6.6    0.31        0.00                 __fentry__ [8]

-----------------------------------------------

                0.19        0.00 9642736/9642736     group_sort [7]
[9]      4.1    0.19        0.00 9642736         swap_rows [9]

-----------------------------------------------

                0.10        0.08 2533679/2533679     check [11]
[10]     3.8    0.10        0.08 2533679         fm [10]
                0.08        0.00 27556229/171192474     new_rational [6]
                0.00        0.00 2533679/5319517     all_pos [21]

-----------------------------------------------

                0.00        0.01      10/310         eval [20]
                0.00        0.17     300/310         search [15]
[11]     3.8    0.00        0.18     310         check [11]
                0.10        0.08 2533679/2533679     fm [10]

-----------------------------------------------

                0.00        0.18       1/1           generic_start_main [13]
[12]     3.8    0.00        0.18       1         main [12]
                0.00        0.17       1/1           search [15]
                0.00        0.01       1/1           eval [20]
                0.00        0.00       2/5           cd [23]
                0.00        0.00       1/1           read_ref [24]

-----------------------------------------------

                                                     <spontaneous>
[13]     3.8    0.00        0.18                 generic_start_main [13]
                0.00        0.18       1/1           main [12]

-----------------------------------------------

                0.01        0.01 2763549/29762339     compare [16]
                0.08        0.08 26998790/29762339     fm_rat [1]
[14]     3.7    0.09        0.08 29762339         addq [14]
                0.08        0.00 29762339/171192474     new_rational [6]

-----------------------------------------------

                0.00        0.17       1/1           main [12]
[15]     3.7    0.00        0.17       1         search [15]
                0.00        0.17     300/310         check [11]
                0.00        0.00       1/5           cd [23]

-----------------------------------------------

                0.01        0.02 2763549/2763549     fm_rat [1]
[16]     0.6    0.01        0.02 2763549         compare [16]
                0.01        0.01 2763549/29762339     addq [14]
                0.00        0.00 2763549/22456441     sign [17]

-----------------------------------------------

                0.00        0.00       4/22456441     fm_rat [1]
                0.00        0.00 2763549/22456441     compare [16]
                0.02        0.00 19692888/22456441     group_sort [7]
[17]     0.4    0.02        0.00 22456441         sign [17]

-----------------------------------------------

                                                     <spontaneous>
[18]     0.2    0.01        0.00                 check_memory_leaks [18]

-----------------------------------------------

                                                     <spontaneous>
[19]     0.2    0.01        0.00                 __fcntl_nocancel [19]

-----------------------------------------------

                0.00        0.01       1/1           main [12]
[20]     0.1    0.00        0.01       1         eval [20]
                0.00        0.01      10/310         check [11]
                0.00        0.00       1/5           cd [23]

-----------------------------------------------

                0.00        0.00 2533679/5319517     fm [10]
                0.00        0.00 2785838/5319517     fm_rat [1]
[21]     0.0    0.00        0.00 5319517         all_pos [21]

-----------------------------------------------

                0.00        0.00       6/6           __libc_sigaction [659]
[22]     0.0    0.00        0.00       6         ctrl_c [22]

-----------------------------------------------

                0.00        0.00       1/5           search [15]
                0.00        0.00       1/5           eval [20]
                0.00        0.00       1/5           read_ref [24]
                0.00        0.00       2/5           main [12]
[23]     0.0    0.00        0.00       5         cd [23]

-----------------------------------------------

                0.00        0.00       1/1           main [12]
[24]     0.0    0.00        0.00       1         read_ref [24]
                0.00        0.00       1/5           cd [23]

-----------------------------------------------





flat profile:

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

granularity: each sample hit covers 2 byte(s) for 0.22% of 4.64 seconds

  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 44.0       2.05     2.05 26924781     0.00     0.00  gcd [3]
 11.0       2.56     0.51                             fm_rat [1]
 10.7       3.05     0.50 86875116     0.00     0.00  reduce [2]
 10.3       3.53     0.48 171192474     0.00     0.00  new_rational [6]
  6.6       3.84     0.31                             __fentry__ [8]
  4.1       4.03     0.19  9642736     0.00     0.00  swap_rows [9]
  3.7       4.20     0.17 26998790     0.00     0.00  mulq [4]
  2.4       4.31     0.11  5319517     0.00     0.00  group_sort [7]
  2.2       4.41     0.10 32877536     0.00     0.00  divq [5]
  2.2       4.51     0.10  2533679     0.00     0.00  fm [10]
  1.9       4.60     0.09 29762339     0.00     0.00  addq [14]
  0.4       4.62     0.02 22456441     0.00     0.00  sign [17]
  0.2       4.63     0.01  2763549     0.00     0.00  compare [16]
  0.2       4.64     0.01                             __fcntl_nocancel [19]
  0.2       4.65     0.01                             check_memory_leaks [18]
  0.0       4.65     0.00  5319517     0.00     0.00  all_pos [21]
  0.0       4.65     0.00      310     0.00     0.57  check [11]
  0.0       4.65     0.00        6     0.00     0.00  ctrl_c [22]
  0.0       4.65     0.00        5     0.00     0.00  cd [23]
  0.0       4.65     0.00        1     0.00     5.72  eval [20]
  0.0       4.65     0.00        1     0.00   177.26  main [12]
  0.0       4.65     0.00        1     0.00     0.00  read_ref [24]
  0.0       4.65     0.00        1     0.00   171.55  search [15]

Index by function name

  [19] __fcntl_nocancel     [22] ctrl_c                [4] mulq               
   [8] __fentry__            [5] divq                  [6] new_rational       
  [14] addq                 [20] eval                 [24] read_ref           
  [21] all_pos              [10] fm                    [2] reduce             
  [23] cd                    [1] fm_rat               [15] search             
  [11] check                 [3] gcd                  [17] sign               
  [18] check_memory_leaks    [7] group_sort            [9] swap_rows          
  [16] compare              [12] main               
