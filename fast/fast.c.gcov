        -:    0:Source:fast.c
        -:    0:Graph:fast.gcno
        -:    0:Data:fast.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdbool.h>
        -:    2:#include <stdint.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <inttypes.h>
        -:    5:
        -:    6:typedef struct
        -:    7:{
        -:    8:	intmax_t p;
        -:    9:	intmax_t q;
        -:   10:} rational;
        -:   11:
 39536150:   12:int gcd(uintmax_t u, uintmax_t v)
        -:   13:{
        -:   14:	unsigned char shift;
 39536150:   15:	shift = __builtin_ctz(u | v);
 39536150:   16:	u >>= __builtin_ctz(u);
        -:   17:	do
        -:   18:	{
494847489:   19:		v >>= __builtin_ctz(v);
494847489:   20:		if (u > v)
        -:   21:		{
247066577:   22:			uintmax_t t = v;
247066577:   23:			v = u;
247066577:   24:			u = t;
        -:   25:		}
494847489:   26:		v = v - u;
494847489:   27:	} while (v != 0);
 39536150:   28:	return u << shift;
        -:   29:}
        -:   30:
183747448:   31:rational reduce(rational r)
        -:   32:{
183747448:   33:	intmax_t lim = 600000;
183747448:   34:	if (imaxabs(r.p) < lim && imaxabs(r.q) < lim)
        -:   35:	{
164080255:   36:		return r;
        -:   37:	}
        -:   38:
        -:   39:	int g;
 19667193:   40:	if (r.p == 0)
    #####:   41:		return r;
 59203343:   42:	while ((g = gcd(imaxabs(r.p), r.q)) != 1)
        -:   43:	{
 19868957:   44:		r.p /= g;
 19868957:   45:		r.q /= g;
        -:   46:	}
 19667193:   47:	return r;
        -:   48:}
        -:   49:
375379888:   50:rational new_rational(intmax_t p, intmax_t q)
        -:   51:{
375379888:   52:	return (rational){.p = (q < 0 ? p * -1 : p), .q = (q < 0 ? q * -1 : q)};
        -:   53:}
        -:   54:
 60499728:   55:rational addq(rational f1, rational f2)
        -:   56:{
        -:   57:	//return reduce(new_rational(f1.p * f2.q + f2.p * f1.q, f1.q * f2.q));
 60499728:   58:	return new_rational(f1.p * f2.q + f2.p * f1.q, f1.q * f2.q);
        -:   59:}
        -:   60:
 54800439:   61:rational mulq(rational f1, rational f2)
        -:   62:{
 54800439:   63:	rational r1 = reduce(new_rational(f1.p, f2.q));
 54800439:   64:	rational r2 = reduce(new_rational(f2.p, f1.q));
 54800439:   65:	return new_rational(r1.p * r2.p, r1.q * r2.q);
        -:   66:	//return reduce(new_rational(f1.p * f2.p, f1.q * f2.q));
        -:   67:}
        -:   68:
 74146570:   69:rational divq(rational f1, rational f2)
        -:   70:{
        -:   71:	//return mulq(f1, new_rational(f2.q, f2.p));
 74146570:   72:	return reduce(new_rational(f1.p * f2.q, f1.q * f2.p));
        -:   73:}
        -:   74:
 65190465:   75:signed char sign(rational r)
        -:   76:{
 65190465:   77:	return (r.p < 0 ? -1 : r.p == 0 ? 0 : 1);
        -:   78:}
        -:   79:
  5699289:   80:int compare(rational r1, rational r2)
        -:   81:{
  5699289:   82:	r2.p = -r2.p;
  5699289:   83:	return sign(addq(r1, r2));
        -:   84:}
        -:   85:
 18064955:   86:void swap_rows(size_t rows, size_t cols, rational a[rows][cols], int index1, int index2)
        -:   87:{
        -:   88:	rational tmp;
 76506220:   89:	for (size_t i = 0; i < cols; i++)
        -:   90:	{
 58441265:   91:		tmp = a[index1][i];
 58441265:   92:		a[index1][i] = a[index2][i];
 58441265:   93:		a[index2][i] = tmp;
        -:   94:	}
 18064955:   95:}
        -:   96:
 11070325:   97:void group_sort(size_t rows, size_t cols, rational m[rows][cols], size_t *n1, size_t *n2)
        -:   98:{
 11070325:   99:	char pos = 0;
 11070325:  100:	size_t zeros = rows - 1;
 48707418:  101:	for (size_t j = 0; j <= zeros; j++)
        -:  102:	{
 37637093:  103:		signed char s = sign(m[j][cols - 2]);
 37637093:  104:		if (s > 0)
        -:  105:		{
 14837818:  106:			(*n1)++;
 14837818:  107:			swap_rows(rows, cols, m, j, pos++);
        -:  108:		}
 22799275:  109:		else if (s == 0)
        -:  110:		{
  3227137:  111:			(*n2)--;
  3227137:  112:			swap_rows(rows, cols, m, j--, zeros--);
        -:  113:		}
        -:  114:	}
 11070325:  115:}
        -:  116:
 14365209:  117:bool all_pos(size_t rows, size_t cols, rational m[rows][cols])
 14365209:  118:{
 25148967:  119:	for (int i = 0; i < rows; i++)
        -:  120:	{
 21854083:  121:		if (sign(m[i][cols - 1]) != 1)
        -:  122:		{
 11070325:  123:			return false;
        -:  124:		}
        -:  125:	}
  3294884:  126:	return true;
        -:  127:}
        -:  128:
 14365209:  129:bool fm_rat(size_t rows, size_t cols, rational m[rows][cols])
 14365209:  130:{
        -:  131:	// loop vars
        -:  132:	size_t i;
        -:  133:	size_t j;
        -:  134:	size_t l;
        -:  135:
        -:  136:	// step 1
 14365209:  137:	size_t r = cols - 1;
 14365209:  138:	size_t r_prim = r - 1;
 14365209:  139:	size_t s = rows;
        -:  140:
        -:  141:	// step 2
 14365209:  142:	size_t n1 = 0;
 14365209:  143:	size_t n2 = rows;
        -:  144:
 14365209:  145:	if (all_pos(rows, cols, m))
        -:  146:	{
  3294884:  147:		return true;
        -:  148:	}
        -:  149:
 11070325:  150:	group_sort(rows, cols, m, &n1, &n2);
        -:  151:
        -:  152:	// step 3
        -:  153:	// POTENTIALLY MAKE THIS SHORTER, REMOVE OUTER LOOP
 45480281:  154:	for (i = 0; i < n2; i++)
        -:  155:	{
 74146570:  156:		for (j = 0; j < r_prim; j++)
 39736614:  157:			m[i][j] = divq(m[i][j], m[i][r_prim]);
 34409956:  158:		m[i][r] = divq(m[i][r], m[i][r_prim]);
        -:  159:	}
        -:  160:
        -:  161:	// more variables needs to be eliminated
 11070325:  162:	if (r > 1)
 10629861:  163:	{
        -:  164:		// step 4
        -:  165:		// n2 > n1 exist negative coeffs
        -:  166:
        -:  167:		// goto step 6 and 7
 10629861:  168:		int s_prim = s - n2 + n1 * (n2 - n1);
 10629861:  169:		if (s_prim == 0)
  3227174:  170:			return true;
  7402687:  171:		rational m_prim[s_prim][r];
  7402687:  172:		size_t currentRow = 0;
  7402687:  173:		rational rat = {.p = -1, .q = 1};
 15247868:  174:		for (i = 0; i < n1; i++)
 29621408:  175:			for (j = n1; j < n2; j++)
        -:  176:			{
 54800439:  177:				for (l = 0; l < r_prim; l++)
        -:  178:				{
 33024212:  179:					m_prim[currentRow][l] = addq(mulq(m[j][l], rat), m[i][l]);
        -:  180:				}
 21776227:  181:				m_prim[currentRow][r_prim] = addq(m[i][r], mulq(rat, m[j][r]));
 21776227:  182:				currentRow++;
        -:  183:			}
        -:  184:
 10629824:  185:		for (i = n2; i < s; i++)
        -:  186:		{
  9681410:  187:			for (j = 0; j < r_prim; j++)
  6454273:  188:				m_prim[currentRow][j] = m[i][j];
        -:  189:
  3227137:  190:			m_prim[currentRow][r_prim] = m[i][r];
  3227137:  191:			currentRow++;
        -:  192:		}
        -:  193:
  7402687:  194:		return fm_rat(s_prim, r, m_prim);
        -:  195:	}
        -:  196:	else
        -:  197:	{
        -:  198:
   440464:  199:		if ((s - n2 + n1 * (n2 - n1)) == 0)
   261795:  200:			return true;
        -:  201:		//step 5
   178669:  202:		rational max = m[n1][r];
   178669:  203:		rational min = m[0][r];
  2270605:  204:		for (i = 1; i < n1; i++)
  2091936:  205:			if (compare(m[i][r], min) == -1)
   425994:  206:				min = m[i][r];
        -:  207:
  3607353:  208:		for (i = n1 + 1; i < n2; i++)
  3428684:  209:			if (compare(m[i][r], max) == 1)
   449988:  210:				max = m[i][r];
        -:  211:
   178669:  212:		for (i = n2; i < s; i++)
    #####:  213:			if (sign(m[i][r]) == -1)
    #####:  214:				return false;
        -:  215:
   178669:  216:		return compare(min, max) == 1;
        -:  217:	}
        -:  218:}
        -:  219:
  6962522:  220:bool fm(size_t rows, size_t cols, signed char a[rows][cols], signed char c[rows])
  6962522:  221:{
  6962522:  222:	rational m[rows][cols + 1];
        -:  223:
 26045980:  224:	for (size_t j = 0; j < rows; j++)
        -:  225:	{
 76332273:  226:		for (size_t i = 0; i < cols; i++)
 57248815:  227:			m[j][i] = new_rational(a[j][i], 1);
 19083458:  228:		m[j][cols] = new_rational(c[j], 1);
        -:  229:	}
        -:  230:
  6962522:  231:	return fm_rat(rows, cols + 1, m);
        -:  232:}
